#!/usr/bin/env ruby

require 'yaml'
require 'open3'
require 'json'
require 'net/http'
require 'fileutils'
require 'securerandom'
require 'socket'
require 'timeout'

# Gems
require 'json-schema'

ONE_VERSION = 6.8

HELP = <<~EOT
    opsforge CLI options
        deploy -> Deploys the COGNIT architecture on AWS
        clean  -> Frees up the resources on the public cloud
        help   -> This help message
EOT

def verify_requirements
    ['aws', 'terraform', 'ansible'].each do |cmd|
        if !cmd_exists?(cmd)
            raise "Missing required command #{cmd}. Check requirements on documentation."
        end
    end
end

# TODO
def verify_deployment(infra, opsforge_template)
    # checks = {
    #     :engine => {
    #         :oned_reachable => false,
    #         :oneflow_reachable => false,
    #         :port => true
    #     },
    #     :cloud => {
    #         :api => false,
    #         :version => false,
    #         :web_ports => {
    #             :main => false,
    #             :next_gen => false
    #         },
    #         :ai_orchestrator_reachable => false
    #     }

    # }

    # engine_port = nil
    # sunstone_port = nil
    # fireedge_port = nil
    # one_version = ONE_VERSION

    # # Check provision Engine
    # if opsforge_template[:cognit].key?(:engine)
    #     engine_port = opsforge_template[:cognit][:engine][:port] || 1337
    # end

    # checks[:engine][:port] = true if socket?(infra[:engine], engine_port)

    # # Check Cloud-Edge Manager
    # if opsforge_template[:cognit][:cloud].key?(:web_ports)
    #     sunstone_port = opsforge_template[:cognit][:cloud][:web_ports][:main] || 9869
    #     fireedge_port = opsforge_template[:cognit][:cloud][:web_ports][:next_gen] || 2616
    # end

    # if opsforge_template[:cognit][:cloud].key?(:version)
    #     one_version = opsforge_template[:cognit][:cloud][:version] || ONE_VERSION
    # end

    # checks[:cloud][:api] = true if socket?(infra[:cloud], 2633)
    # checks[:cloud][:web_ports][:main] = true if socket?(infra[:cloud], sunstone_port)
    # checks[:cloud][:web_ports][:next_gen] = true if socket?(infra[:cloud], fireedge_port)
end

def validate_template(opsforge_template)
    schema = YAML.load_file("#{__dir__}/schema.json")

    JSON::Validator.validate!(schema, opsforge_template)
end

def terraform_aws(opsforge_template)
    puts 'Setting up infrastructure on AWS'

    tfvars = "#{__dir__}/terraform/aws/terraform.tfvars"
    File.new(tfvars, 'w') unless File.exist?(tfvars)

    tfvars_content = "local_machine_ip = \"#{public_ip}\"\n"
    opsforge_template[:infra][:aws].each {|k, v| tfvars_content << "#{k} = \"#{v}\"\n" }

    tfvars_content << "engine_port = #{opsforge_template[:cognit][:engine][:port]}\n" if opsforge_template[:cognit].key?(:engine) && opsforge_template[:cognit][:engine][:port]

    if opsforge_template[:cognit].key?(:cloud) && opsforge_template[:cognit][:cloud].key?(:web_ports)
        tfvars_content << "sunstone_port = #{opsforge_template[:cognit][:cloud][:web_ports][:main]}\n" if opsforge_template[:cognit][:cloud][:web_ports][:main]
        tfvars_content << "fireedge_port = #{opsforge_template[:cognit][:cloud][:web_ports][:next_gen]}\n" if opsforge_template[:cognit][:cloud][:web_ports][:next_gen]
    end

    File.open(tfvars, 'w') {|file| file.puts(tfvars_content) }

    infra = JSON.parse(terraform('aws').last)

    ec2_instances = {}

    ['cloud', 'engine', 'ai_orchestrator'].each do |ec2|
        ec2_instances[ec2.to_sym] = infra[ec2]['value']
    end

    puts 'Infrastructure on AWS has been deployed'

    return ec2_instances
end

def ansible(infra, opsforge_template)
    puts 'Installing Cloud-Edge Manager, Provisioning Engine and AI Orchestrator'

    inventory = {
        'frontend' => {
            'hosts' => {
                'f1' => {
                    'ansible_host' => infra[:cloud]
                }
            },
            'vars' => {
                'one_version' => opsforge_template[:cognit][:cloud][:version] || ONE_VERSION,
                'one_pass' => opsforge_template[:cognit][:cloud][:password],
                'one_token' => opsforge_template[:cognit][:cloud][:ee_token],
                'external_scheduler' => "http://#{infra[:ai_orchestrator]}:4567",
                'features' => {
                    'prometheus' => true,
                    'gateproxy' => false
                },
                'vn' => {
                    'admin_net' => {
                        'managed' => true,
                        'template' => {
                            'VN_MAD' => 'bridge',
                        'PHYDEV' => 'eth0',
                        'BRIDGE' => 'br0',
                        'AR' => {
                            'TYPE' => 'IP4',
                            'IP' => '172.20.0.100',
                            'SIZE' => 48,
                            'NETWORK_ADDRESS' => '172.20.0.0',
                            'NETWORK_MASK' => '255.255.255.0',
                            'GATEWAY' => '172.20.0.1',
                            'DNS' => '1.1.1.1'
                        }
                        }
                    }
                }
            }
        },
        # TODO: Enable ai entry inventory after instructions have been verified by AI team
        # 'ai' => {
        #     'hosts' => {
        #         'a1' => {
        #             'ansible_host' => infra[:ai_orchestrator]
        #         }
        #     },
        #     'vars' => {}
        # },
        'engine' => {
            'hosts' => {
                'e1' => {
                    'ansible_host' => infra[:engine]
                }
            },
            'vars' => {
                'oned' => "http://#{infra[:cloud]}:2633/RPC2",
                'oneflow' => "http://#{infra[:cloud]}:2474"
            }
        }
    }

    inventory['frontend']['vars']['one_extensions_version'] =
        opsforge_template[:cognit][:cloud][:extensions][:version] if opsforge_template[:cognit][:cloud].key?(:extensions) && opsforge_template[:cognit][:cloud][:extensions][:version]

    if opsforge_template[:cognit][:cloud].key?(:web_ports)
        inventory['frontend']['vars']['fireedge_port'] =
            opsforge_template[:cognit][:cloud][:web_ports][:next_gen] if opsforge_template[:cognit][:cloud][:web_ports].key?(:next_gen)
        inventory['frontend']['vars']['sunstone_port'] =
            opsforge_template[:cognit][:cloud][:web_ports][:main] if opsforge_template[:cognit][:cloud][:web_ports].key?(:main)
    end

    if opsforge_template[:cognit].key?(:engine)
        inventory['engine']['vars']['engine_port'] =
            opsforge_template[:cognit][:engine][:port] if opsforge_template[:cognit][:engine][:port]
        inventory['engine']['vars']['version'] =
            opsforge_template[:cognit][:engine][:version] if opsforge_template[:cognit][:engine][:version]
    end

    # TODO
    # inventory['ai']['vars']['version'] = opsforge_template[:cognit][:ai][:version] if opsforge_template[:cognit].key?(:ai) && opsforge_template[:cognit][:ai][:version]

    inventory = inventory.to_yaml

    cfg_defaults = <<~EOT
        [defaults]
        collections_paths=./one-deploy/ansible_collections/
        inventory=./inventory.yaml
        gathering=explicit
        host_key_checking=false
        display_skipped_hosts=true
        retry_files_enabled=false
        any_errors_fatal=true
        stdout_callback=yaml
        timeout=30
    EOT

    cfg_privilege_escalation = <<~EOT
        [privilege_escalation]
        become=true
        become_user=root
    EOT

    cfg_ssh_connection = <<~EOT
        [ssh_connection]
        pipelining=true
        ssh_args=-q -o ControlMaster=auto -o ControlPersist=60
    EOT

    if opsforge_template[:infra].key?(:aws)
        cfg_defaults << "remote_user=ubuntu\n"
    else
        cfg_defaults << "remote_user=root\n"
    end

    cfg = cfg_defaults + cfg_privilege_escalation + cfg_ssh_connection

    Dir.chdir("#{__dir__}/ansible/one-deploy")
    cmd_exec('make requirements')
    Dir.chdir("#{__dir__}/ansible")

    File.write("#{__dir__}/ansible/inventory.yaml", inventory)
    File.write("#{__dir__}/ansible/ansible.cfg", cfg)

    if opsforge_template[:infra].key?(:aws)
        30.times do |t|
            raise 'Timeout while waiting for SSH access to AWS infra' if t == 30

            begin
                cmd_exec("ssh ubuntu@#{infra[:cloud]} uptime", false)
            rescue StandardError
                sleep 1
                next
            end
        end
    end

    cmd_exec('ansible-playbook -vvv playbooks/cognit.yaml')
    Dir.chdir("#{__dir__}/..")

    puts 'Frontend and Provisioning Engine installed'
end

def terraform_opennebula(frontend, opsforge_template)
    puts 'Setting up Cloud-Edge Manager for Cognit'

    tfvars = "#{__dir__}/terraform/opennebula/terraform.tfvars"
    File.new(tfvars, 'w') unless File.exist?(tfvars)

    oned = "http://#{frontend}:2633/RPC2"
    oneflow = "http://#{frontend}:2474"

    File.open(tfvars, 'w') do |file|
        file.puts("oned = \"#{oned}\"")
        file.puts("oneflow = \"#{oneflow}\"")
        file.puts("password = \"#{opsforge_template[:cognit][:cloud][:password]}\"")
    end

    terraform('opennebula')

    puts 'Frontend ready for Cognit'
end

def clean
    puts 'Destroying infrastructure'

    ['opennebula', 'aws'].each do |provider|
        Dir.chdir("#{__dir__}/terraform/#{provider}")
        ['init', 'destroy --auto-approve'].each do |cmd|
            cmd_exec("terraform #{cmd}", false)
        end
    end

    ['ansible.cfg', 'inventory.yaml'].each do |file|
        File.delete("#{__dir__}/ansible/#{file}")
    end

    File.delete("#{__dir__}/opsforge.log")

    puts 'COGNIT deployment succesfully destroyed'
end

# Helpers

def socket?(host, port)
    begin
        Timeout.timeout(5) do
            begin
                socket = TCPSocket.new(host, port)
                socket.close
                true
            rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
                false
            end
        end
    rescue Timeout::Error
        false
    end
end

def cmd_exec(cmd, log = true)
    o, e, s = Open3.capture3(cmd)

    if s != 0
        STDERR.puts "Command \"#{cmd}\" failed:" if log
        raise "#{o}\n#{e}"
    end

    log(o) if log

    o
end

def cmd_exists?(command)
    exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
    ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
        exts.each do |ext|
            exe = File.join(path, "#{command}#{ext}")
            return true if File.executable?(exe) && !File.directory?(exe)
        end
    end
    false
end

def terraform(provider)
    output = []

    Dir.chdir("#{__dir__}/terraform/#{provider}")

    ['terraform init', 'terraform apply --auto-approve', 'terraform output -json'].each do |cmd|
        output << cmd_exec(cmd)
    end

    Dir.chdir(__dir__)

    output
end

def public_ip
    uri = URI('https://api.ipify.org')
    response = Net::HTTP.get(uri)
    response.strip
end

def log(info)
    file = "#{__dir__}/opsforge.log"
    File.open(file, 'a') do |f|
        f.puts info
    end
end

def howlong(&logic)
    start_time = Time.now
    logic.call
    puts "Took #{Time.now - start_time} seconds"
end

# BEGIN

verify_requirements

case ARGV[0]
when 'deploy'
    opsforge_template = YAML.load_file(ARGV[1])

    begin
        validate_template(opsforge_template)
    rescue JSON::Schema::ValidationError => e
        puts e
        exit 1
    end

    infra = nil
    opsforge_template[:cognit] = {} unless opsforge_template.key?(:cognit)
    opsforge_template[:cognit][:cloud] = {} unless opsforge_template[:cognit].key?(:cloud)

    begin
        inventory = YAML.load_file("#{__dir__}/ansible/inventory.yaml")
        opsforge_template[:cognit][:cloud][:password] = inventory['frontend']['vars']['one_pass']
    rescue StandardError
        opsforge_template[:cognit][:cloud][:password] = SecureRandom.alphanumeric
    end

    if opsforge_template[:infra].key?(:aws)
        howlong { infra = terraform_aws(opsforge_template) }
    else
        infra = opsforge_template[:infra][:hosts]
        puts 'Deploying COGNIT on the specified hosts'
    end

    howlong { ansible(infra, opsforge_template) }
    howlong { terraform_opennebula(infra[:cloud], opsforge_template) }

    verify_deployment(infra, opsforge_template)

    report = <<~EOT

        Infrastructure
        #{JSON.pretty_generate(infra)}

        Connect to these hosts with the <ubuntu> user using the provided ssh key'
        Logs available at ./opsforge.log'

        Take a look at AWS cluster provisioning in order to setup your KVM cluster\nhttps://docs.opennebula.org/stable/provision_clusters/providers/aws_provider.html#aws-provider

        After that, take a look at the Energy Consumption extension\nhttps://github.com/SovereignEdgeEU-COGNIT/opennebula-extensions?tab=readme-ov-file#scaphandre-extension
    EOT

    puts report
when 'clean'
    clean
when 'help'
    puts HELP
else
    STDERR.puts HELP
    exit 1
end
