#!/usr/bin/env ruby

require 'yaml'
require 'open3'
require 'json'
require 'net/http'
require 'fileutils'
require 'securerandom'
require 'socket'
require 'timeout'

# Gems
require 'json-schema'

ONE_VERSION = 6.8

ANSIBLE_SSH_ARGS_COMMON = '-q -o ControlMaster=auto -o ControlPersist=6 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

HELP = <<~EOT
    opsforge CLI options
        deploy -> Deploys the COGNIT architecture on AWS
        clean  -> Frees up the resources on the public cloud
        help   -> This help message
EOT

#
# Checks if all of the opsforge dependencies are met
# Will raise an error if a dependency is missing
#
def verify_requirements
    ['aws', 'terraform', 'ansible'].each do |cmd|
        if !cmd_exists?(cmd)
            raise "Missing required command #{cmd}. Check requirements on documentation."
        end
    end

    raise '"one-deploy" git submodule is missing' unless File.directory?("#{__dir__}/ansible/one-deploy")

    ['json-schema'].each do |gem|
        begin
            Gem::Specification.find_by_name(gem)
        rescue StandardError
            raise "Missing gem \"#{gem}\""
        end
    end
end

# TODO
def verify_deployment(infra, opsforge_template)
    # checks = {
    #     :engine => {
    #         :oned_reachable => false,
    #         :oneflow_reachable => false,
    #         :port => true
    #     },
    #     :cloud => {
    #         :api => false,
    #         :version => false,
    #         :web_ports => {
    #             :main => false,
    #             :next_gen => false
    #         },
    #         :ai_orchestrator_reachable => false
    #     }

    # }

    # engine_port = nil
    # sunstone_port = nil
    # fireedge_port = nil
    # one_version = ONE_VERSION

    # # Check provision Engine
    # if opsforge_template[:cognit].key?(:engine)
    #     engine_port = opsforge_template[:cognit][:engine][:port] || 1337
    # end

    # checks[:engine][:port] = true if socket?(infra[:engine], engine_port)

    # # Check Cloud-Edge Manager
    # if opsforge_template[:cognit][:cloud].key?(:web_ports)
    #     sunstone_port = opsforge_template[:cognit][:cloud][:web_ports][:main] || 9869
    #     fireedge_port = opsforge_template[:cognit][:cloud][:web_ports][:next_gen] || 2616
    # end

    # if opsforge_template[:cognit][:cloud].key?(:version)
    #     one_version = opsforge_template[:cognit][:cloud][:version] || ONE_VERSION
    # end

    # checks[:cloud][:api] = true if socket?(infra[:cloud], 2633)
    # checks[:cloud][:web_ports][:main] = true if socket?(infra[:cloud], sunstone_port)
    # checks[:cloud][:web_ports][:next_gen] = true if socket?(infra[:cloud], fireedge_port)
end

#
# Check if the provided opsforge template complies with the schema
#
# @param [Hash] opsforge_template opsforge yaml template contents
#
def validate_template(opsforge_template)
    schema = JSON.load_file("#{__dir__}/schema.json")

    JSON::Validator.validate!(schema, opsforge_template)
end

#
# Provisions the COGNIT modules in AWS using terraform
#
# @param [Hash] opsforge_template opsforge yaml template contents
#
# @return [Hash] Infrastructure hostnames for each COGNIT module
#
# TODO: Be able to set ec2 type per cognit module
def terraform_aws(opsforge_template)
    puts 'Setting up infrastructure on AWS'

    tfvars = "#{__dir__}/terraform/aws/terraform.tfvars"
    File.new(tfvars, 'w') unless File.exist?(tfvars)

    tfvars_content = "local_machine_ip = \"#{public_ip}\"\n"
    opsforge_template[:infra][:aws].each {|k, v| tfvars_content << "#{k} = \"#{v}\"\n" }

    tfvars_content << "engine_port = #{opsforge_template[:cognit][:engine][:port]}\n" if opsforge_template[:cognit].key?(:engine) && opsforge_template[:cognit][:engine][:port]

    if opsforge_template[:cognit].key?(:cloud) && opsforge_template[:cognit][:cloud].key?(:web_ports)
        tfvars_content << "sunstone_port = #{opsforge_template[:cognit][:cloud][:web_ports][:main]}\n" if opsforge_template[:cognit][:cloud][:web_ports][:main]
        tfvars_content << "fireedge_port = #{opsforge_template[:cognit][:cloud][:web_ports][:next_gen]}\n" if opsforge_template[:cognit][:cloud][:web_ports][:next_gen]
    end

    File.open(tfvars, 'w') {|file| file.puts(tfvars_content) }

    infra = JSON.parse(terraform('aws').last)

    ec2_instances = {}

    ['cloud', 'engine', 'ai_orchestrator'].each do |ec2|
        ec2_instances[ec2.to_sym] = infra[ec2]['value']['private_ip']
    end

    ec2_instances[:ingress] = infra['ingress']['value']['public_dns']
    ec2_instances[:gateway] = infra['ingress']['value']['private_ip']

    puts 'Infrastructure on AWS has been deployed'

    return ec2_instances
end

#
# Sets up the COGNIT modules with ansible using one-deploy
#
# @param [Hash] infra COGNIT infrastructure report for the provision stage
# @param [Hash] opsforge_template opsforge yaml template contents
#
def ansible(infra, opsforge_template)
    puts 'Installing Cloud-Edge Manager, Provisioning Engine and AI Orchestrator'

    Dir.chdir("#{__dir__}/ansible/one-deploy")
    cmd_exec('make requirements')

    if opsforge_template[:infra].key?(:aws)
        ansible_user = 'ubuntu'
    else
        ansible_user = 'root'
    end

    infra[:gateway] = infra[:ingress] if opsforge_template[:infra].key?(:hosts)

    inventory = {
        'ingress' => {
            'hosts' => {
                'i1' => {
                    'ansible_host' => infra[:ingress]
                }
            },
            'vars' => {
                'domain_name' => infra[:ingress],
                'engine_instance_ip' => infra[:engine],
                'frontend_instance_ip' => infra[:cloud]
            }
        },
        'frontend' => {
            'hosts' => {
                'f1' => {
                    'ansible_host' => infra[:cloud]
                }
            },
            'vars' => {
                'ansible_ssh_common_args' => "#{ANSIBLE_SSH_ARGS_COMMON} -o ProxyJump=#{ansible_user}@#{infra[:ingress]}",
                'default_gateway' => infra[:gateway],
                'one_version' => opsforge_template[:cognit][:cloud][:version] || ONE_VERSION,
                'one_pass' => opsforge_template[:cognit][:cloud][:password],
                'one_token' => opsforge_template[:cognit][:cloud][:ee_token],
                'external_scheduler' => "http://#{infra[:ai_orchestrator]}:4567",
                'features' => {
                    'prometheus' => true,
                    'gateproxy' => false
                },
                'vn' => {
                    'admin_net' => {
                        'managed' => true,
                        'template' => {
                            'VN_MAD' => 'bridge',
                        'PHYDEV' => 'eth0',
                        'BRIDGE' => 'br0',
                        'AR' => {
                            'TYPE' => 'IP4',
                            'IP' => '172.20.0.100',
                            'SIZE' => 48,
                            'NETWORK_ADDRESS' => '172.20.0.0',
                            'NETWORK_MASK' => '255.255.255.0',
                            'GATEWAY' => '172.20.0.1',
                            'DNS' => '1.1.1.1'
                        }
                        }
                    }
                }
            }
        },
        'ai' => {
            'hosts' => {
                'a1' => {
                    'ansible_host' => infra[:ai_orchestrator]
                }
            },
            'vars' => {
                'ansible_ssh_common_args' => "#{ANSIBLE_SSH_ARGS_COMMON} -o ProxyJump=#{ansible_user}@#{infra[:ingress]}",
                'default_gateway' => infra[:gateway]
            }
        },
        'engine' => {
            'hosts' => {
                'e1' => {
                    'ansible_host' => infra[:engine],
                    'default_gateway' => infra[:gateway]
                }
            },
            'vars' => {
                'ansible_ssh_common_args' => "#{ANSIBLE_SSH_ARGS_COMMON} -o ProxyJump=#{ansible_user}@#{infra[:ingress]}",
                'default_gateway' => infra[:gateway],
                'oned' => "http://#{infra[:cloud]}:2633/RPC2",
                'oneflow' => "http://#{infra[:cloud]}:2474"
            }
        }
    }

    if opsforge_template[:cognit].key?(:certificate)
        inventory['ingress']['vars']['ssl_certificate_path'] =
            opsforge_template[:cognit][:certificate][:crt]
        inventory['ingress']['vars']['ssl_certificate_key_path'] =
            opsforge_template[:cognit][:certificate][:key]
    end

    inventory['frontend']['vars']['one_extensions_version'] =
        opsforge_template[:cognit][:cloud][:extensions][:version] if opsforge_template[:cognit][:cloud].key?(:extensions) && opsforge_template[:cognit][:cloud][:extensions][:version]

    if opsforge_template[:cognit][:cloud].key?(:web_ports)
        inventory['frontend']['vars']['fireedge_port'] =
            opsforge_template[:cognit][:cloud][:web_ports][:next_gen] if opsforge_template[:cognit][:cloud][:web_ports].key?(:next_gen)
        inventory['frontend']['vars']['sunstone_port'] =
            opsforge_template[:cognit][:cloud][:web_ports][:main] if opsforge_template[:cognit][:cloud][:web_ports].key?(:main)
    end

    if opsforge_template[:cognit].key?(:engine)
        inventory['engine']['vars']['engine_port'] =
            opsforge_template[:cognit][:engine][:port] if opsforge_template[:cognit][:engine][:port]
        inventory['engine']['vars']['version'] =
            opsforge_template[:cognit][:engine][:version] if opsforge_template[:cognit][:engine][:version]
    end

    inventory['ai']['vars']['version'] =
        opsforge_template[:cognit][:ai][:version] if opsforge_template[:cognit].key?(:ai) && opsforge_template[:cognit][:ai][:version]

    inventory = inventory.to_yaml

    cfg = <<~EOT
        [defaults]
        collections_paths=./one-deploy/ansible_collections/
        inventory=./inventory.yaml
        gathering=explicit
        host_key_checking=false
        display_skipped_hosts=true
        retry_files_enabled=false
        any_errors_fatal=true
        stdout_callback=yaml
        timeout=30
        remote_user=#{ansible_user}
        [privilege_escalation]
        become=true
        become_user=root
        [ssh_connection]
        pipelining=true
        ssh_args=#{ANSIBLE_SSH_ARGS_COMMON}
    EOT

    Dir.chdir("#{__dir__}/ansible")
    File.write("#{__dir__}/ansible/inventory.yaml", inventory)
    File.write("#{__dir__}/ansible/ansible.cfg", cfg)

    30.times do |t|
        raise 'Timeout while waiting for SSH access to infra' if t == 30

        begin
            cmd_exec("ssh #{ansible_user}@#{infra[:ingress]} uptime", false)
        rescue StandardError
            sleep 1
            next
        end
    end

    cmd_exec('ansible-playbook playbooks/cognit.yaml')
    Dir.chdir("#{__dir__}/..")

    puts 'Frontend and Provisioning Engine installed'
end

#
# Populates the Cloud-Edge manager with the Serverless Runtimes appliances
#
# @param [String] frontend Cloud-Edge manager hostname
# @param [Hash] opsforge_template opsforge yaml template contents
#
def terraform_opennebula(frontend, opsforge_template)
    puts 'Setting up Cloud-Edge Manager for Cognit'

    tfvars = "#{__dir__}/terraform/opennebula/terraform.tfvars"
    File.new(tfvars, 'w') unless File.exist?(tfvars)

    oned = "http://#{frontend}:2633/RPC2"
    oneflow = "http://#{frontend}:2474"

    File.open(tfvars, 'w') do |file|
        file.puts("oned = \"#{oned}\"")
        file.puts("oneflow = \"#{oneflow}\"")
        file.puts("password = \"#{opsforge_template[:cognit][:cloud][:password]}\"")
    end

    terraform('opennebula')

    puts 'Frontend ready for Cognit'
end

#
# Deletes COGNIT infrastructure provisioning and
# any previously generated output file
#
def clean
    puts 'Destroying infrastructure'

    # Destroy infrastructure in AWS
    Dir.chdir("#{__dir__}/terraform/aws")
    ['init', 'destroy --auto-approve'].each do |cmd|
        cmd_exec("terraform #{cmd}", false)
    end

    # Delete terraform-opennebula state files
    ['tfstate', 'tfstate.backup', 'tfvars'].each do |tf_file|
        file = "#{__dir__}/terraform/opennebula/terraform.#{tf_file}"
        File.delete(file) if File.exist?(file)
    end

    # Delete one-deploy input
    ['ansible.cfg', 'inventory.yaml'].each do |file|
        File.delete("#{__dir__}/ansible/#{file}")
    end

    # Delete opsforge log
    File.delete("#{__dir__}/opsforge.log")

    puts 'COGNIT deployment succesfully destroyed'
end

# Helpers

#
# Checks if a port is active on a host
#
# @param [String] host
# @param [Integer] port
#
# @return [Boolean]
#
def socket?(host, port)
    begin
        Timeout.timeout(5) do
            begin
                socket = TCPSocket.new(host, port)
                socket.close
                true
            rescue Errno::ECONNREFUSED, Errno::EHOSTUNREACH
                false
            end
        end
    rescue Timeout::Error
        false
    end
end

#
# Executes a command on the CLI
#
# @param [String] cmd Command
# @param [Boolean] log Log command output in opsforge.log
#
# @return [String] Command standard output
#
def cmd_exec(cmd, log = true)
    output = []

    Open3.popen3(cmd) do |_stdin, stdout, stderr, wait_thr|
        stdout_thread = Thread.new do
            while (line = stdout.gets)
                output << line
                puts line
                log(line) if log
            end
        end

        stderr_thread = Thread.new do
            while (line = stderr.gets)
                STDERR.puts line if log
                log(line) if log
            end
        end

        stdout_thread.join
        stderr_thread.join

        exit_status = wait_thr.value
        if exit_status != 0
            STDERR.puts "Command \"#{cmd}\" failed:" if log
            raise "#{stdout}\n#{stderr}"
        end
    end

    output.join("\n")
end

#
# Checks if a command exist
#
# @param [String] command Command
#
# @return [Boolean]
#
def cmd_exists?(command)
    exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
    ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
        exts.each do |ext|
            exe = File.join(path, "#{command}#{ext}")
            return true if File.executable?(exe) && !File.directory?(exe)
        end
    end
    false
end

#
# Provisions infrastructure using terraform
#
# @param [String] provider
#
# @return [String] terraform output after provisioning completes
#
def terraform(provider)
    output = []

    Dir.chdir("#{__dir__}/terraform/#{provider}")

    ['terraform init', 'terraform apply --auto-approve', 'terraform output -json'].each do |cmd|
        output << cmd_exec(cmd)
    end

    Dir.chdir(__dir__)

    output
end

#
# Gather the public_ip that the opsforge executor uses to reach the internet
#
# @return [String] public IP address
#
def public_ip
    uri = URI('https://api.ipify.org')
    response = Net::HTTP.get(uri)
    response.strip
end

#
# Writes information to the dedicated opsforge log file
#
# @param [String] info information to be logged
#
def log(info)
    file = "#{__dir__}/opsforge.log"
    File.open(file, 'a') do |f|
        f.puts info
    end
end

#
# Measures how long will a block of code take to run
#
# @param [Proc] &logic Lines of code to be executed
#
# @return [String] Command standard output
#
def howlong(&logic)
    start_time = Time.now
    output = logic.call
    puts "Took #{Time.now - start_time} seconds"
    output
end

# BEGIN

verify_requirements

case ARGV[0]
when 'deploy'
    opsforge_template = YAML.load_file(ARGV[1])

    validate_template(opsforge_template)

    infra = nil
    opsforge_template[:cognit] = {} unless opsforge_template.key?(:cognit)
    opsforge_template[:cognit][:cloud] = {} unless opsforge_template[:cognit].key?(:cloud)

    begin
        inventory = YAML.load_file("#{__dir__}/ansible/inventory.yaml")
        opsforge_template[:cognit][:cloud][:password] = inventory['frontend']['vars']['one_pass']
    rescue StandardError
        opsforge_template[:cognit][:cloud][:password] = SecureRandom.alphanumeric
    end

    if opsforge_template[:infra].key?(:aws)
        howlong { infra = terraform_aws(opsforge_template) }
        ssh_connection = "- SSH: Connect to the host \"#{infra[:ingress]}\" with the \"ubuntu\" user, using the provided ssh key. You can access the rest of the cluster using this host as an SSH jump host."
    else
        infra = opsforge_template[:infra][:hosts]
        ssh_connection = ''
        puts 'Deploying COGNIT on the specified hosts'
    end

    howlong { ansible(infra, opsforge_template) }
    howlong { terraform_opennebula(infra[:ingress], opsforge_template) }

    verify_deployment(infra, opsforge_template)

    if !opsforge_template[:cognit].key?(:certificate)
        ssl_certs = "- SSL: Certificate files at #{Dir.home}/.cognit_ssl_certs"
    else
        ssl_certs = ''
    end

    infra.delete!(:gateway)

    report = <<~EOT
        #{'='*80}

        Infrastructure
        #{JSON.pretty_generate(infra)}

        Access
        - Cloud-Edge Manager credentials: oneadmin:#{opsforge_template[:cognit][:cloud][:password]}
        - Provision Engine: https://#{infra[:ingress]}/engine
        - Stable Web UI:    https://#{infra[:ingress]}/sunstone
        - Next Gen Web UI:  https://#{infra[:ingress]}/fireedge
        #{ssh_connection}
        #{ssl_certs}

        Take a look at AWS cluster provisioning in order to setup your KVM cluster\nhttps://docs.opennebula.org/stable/provision_clusters/providers/aws_provider.html#aws-provider
        After that, take a look at the Energy Consumption extension\nhttps://github.com/SovereignEdgeEU-COGNIT/opennebula-extensions?tab=readme-ov-file#scaphandre-extension

        Logs available at ./opsforge.log'
    EOT

    puts report
when 'clean'
    clean
when 'help'
    puts HELP
else
    STDERR.puts HELP
    exit 1
end
